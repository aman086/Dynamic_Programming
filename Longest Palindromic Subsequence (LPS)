/*

** There is a trick for Longest Common Subsequence (LCS)
------------------------------------------------------

We have to find the longest palindromic Subsequence.

Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence
 by deleting some or no elements without changing the order of the remaining elements.



Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".


Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".



*/


#include<bits/stdc++.h>
using namespace std;

int longestPalindromeSubsequence(string str1)
{
      string str2 = str1;
        reverse(str2.begin() , str2.end());
    int n= str1.size();
      int m = str2.size();
      int dp[n+1][m+1];
     for(int i=0;i<=n;i++){
         for(int j=0;j<=m;j++)
             dp[i][j] = 0;
     }        

     for(int i=1;i<=n;i++){
         for(int j=1;j<=m;j++){
             if(str1[i-1] == str2[j-1])
                 dp[i][j] = dp[i-1][j-1] + 1;
             else
                 dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
         }
     }
        return dp[n][m];
}


int main(){
    string s;
    cin>>s;
    cout<<longestPalindromeSubsequence(s);
}
