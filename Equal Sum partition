/*


Given a non-empty array nums containing only positive integers, 
find if the array can be partitioned into two subsets such that
 the sum of elements in both subsets is equal.


 Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].


Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.


Link - https://leetcode.com/problems/partition-equal-subset-sum/

*/


#include<bits/stdc++.h>
using namespace std;

 bool canPartition(vector<int>& nums) {
       int n = nums.size();
       int sum = 0;
       for(int i=0;i<nums.size();i++){
            sum+=nums[i];
       }       
       if(sum&1)
       	return false;
       bool dp[nums.size()+1][sum+1];
       for(int i=0;i<=n;i++){
       	 for(int j=0;j<=sum;j++){
       	 	if(j==0)
       	 		dp[i][j] = true;
       	 	if(i==0)
       	 		dp[i][j] = false;
       	 }
       }
		for(int i=1;i<=n;i++){
		   for(int j=1;j<=sum;j++){
		       	 	if(nums[i-1] <= j){
		       	 		dp[i][j] = (dp[i-1][j-nums[i-1]] || dp[i-1][j]);
		       	 	}
		       	 	else{
		       	 		dp[i][j] = dp[i-1][j];
		       	 	}
		    }
		}
		for(int i=0;i<=n;i++){
			if(dp[i][sum/2]==true)
				return true;
		}
		return false;
		// return dp[n][sum];
 }

int main(){

   int n;
   cin>>n;
   vector<int> arr(n);
   for(int i=0;i<n;i++)
   	cin>>arr[i];
   cout << canPartition(arr);
}
