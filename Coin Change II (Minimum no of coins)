/*

You are given an integer array coins representing coins of different denominations
 and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. 
If that amount of money cannot be made up by any combination of the coins, 
return -1.

You may assume that you have an infinite number of each kind of coin.


Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1


Input: coins = [2], amount = 3
Output: -1

Input: coins = [1], amount = 0
Output: 0

*/


#include<bits/stdc++.h>
using namespace std;



/*
 Recursive Approach................


void coinChange(vector<int> &arr , int n , int target , vector<int> &current , vector<vector<int>> &subsets){


    if(target==0){
    	subsets.push_back(current);
    	return;
    }
    if(n==0 || target<0)
    	return;
     current.push_back(arr[n-1]);
    coinChange(arr , n , target-arr[n-1] , current , subsets);
    current.pop_back();

    coinChange(arr , n-1 , target , current , subsets);

}

int main(){
	int n,target;
	cin>>n>>target;
	vector<int> arr(n);
	for(int i=0;i<n;i++)
		cin>>arr[i];
	vector<int> current;
	vector<vector<int>> subsets;
	coinChange(arr , n , target , current , subsets);
	for(auto it : subsets){
		for(auto val : it)
			cout<<val<<" ";
		cout<<endl;
	}
}


*/

//  Dynamic Approach.......


  int countCoin(vector<int> arr , int n , int target , vector<vector<int>> &dp){
           // int n = arr.size();
           for(int i=1;i<=n;i++){
             for(int j=1;j<=target;j++){
                if(arr[i-1]<=j){
                    dp[i][j] = min(dp[i-1][j] , dp[i][j-arr[i-1]]+1);

                }else{
                    dp[i][j] = dp[i-1][j];
                }
             }
           }
      
    if(dp[n][target]==INT_MAX-1)
          return -1;
    return dp[n][target];
}
    
    
    
    int coinChange(vector<int>& coins, int target) {
         int n = coins.size();
        vector<vector<int>> dp(n+1 , vector<int>(target+1 , 0));
            for(int i=1;i<=target;i++){
                dp[0][i] = INT_MAX-1;
            }
        
        return countCoin(coins , n , target , dp);
    }


int main(){
	int n , target;
	cin>>n>>target;
	vector<int> vtr(n);
	for(int i=0;i<n;i++)
		cin>>vtr[i];
	cout<<coinChange(vtr , target)<<endl;
}
