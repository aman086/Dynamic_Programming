
/*
Problem Statement :->
----------------------

Given two strings. The task is to find the length of the longest common substring.

Input: S1 = "ABCDGH", S2 = "ACDGHR", n = 6, m = 6
Output: 4
Explanation: The longest common substring
is "CDGH" which has length 4.


Input: S1 = "ABC", S2 "ACB", n = 3, m = 3
Output: 1
Explanation: The longest common substrings
are "A", "B", "C" all having length 1.




*/

#include<bits/stdc++.h>
using namespace std;

// 0>=X.length , Y.length <=1000

int dp[1001][1001];

int longestCommonSubstring(string x , string y , int n , int m){

    int ans = 0;
    /*
     because at end we have to search in whole matrix for maximum element.
       then why we can't do this with running our existing code
       because every increment is occur only in if() Block..
    */

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            
            if(x[i-1]==y[j-1]){
                dp[i][j] = dp[i-1][j-1]+1;
                ans = max(ans , dp[i][j]);
            }
            else{
                dp[i][j] = 0;
            }
       
        }
    }

    return ans;
}


int main(){
    string x,y;
    cin>>x>>y;
  
//  Here we are going to initialize 1st row and 1st column with some value....
//  Base Condition == Initialization
    for(int i=0;i<=x.size();i++){
        for(int j=0;j<=y.size();j++){
            if(i==0 || j==0)
                dp[i][j] = 0;
            else
                dp[i][j] = -1;
            // we can initialize remaining element with 0 also..
        }
    }

    cout << longestCommonSubstring(x , y , x.size() , y.size());
}
